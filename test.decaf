// CS 432 PROJECT 0: DECAF PROGRAMMING
// Katie Brasacchio

def int fact(int n)
{
    int counter;
    counter = n - 1;

    while (counter >= 1) {
        n = n * counter;
        counter = counter - 1;
    }

    return n;
}

def int fib(int n)
{
    int counter;
    int a;
    int b;
    int c;

    counter = 2;
    a = 1;
    b = 1;
    c = 0;

    if (n == 1) {
        return a;
    }

    if (n == 2) {
        return b;
    }

    while (counter != n) {
        c = a + b;
        a = b;
        b = c;
        counter = counter + 1;
    }

    return c;
}

def bool is_prime(int n)
{
    int counter;
    bool answer;

    counter = 2;
    answer = true;

    if ((n == 0) || (n == 1)) {
        return false;
    }

    while (counter < n) {
        if ((n % counter) == 0) {
            answer = false;
        }
        counter = counter + 1;
    }

    return answer;
}

def int gcd(int a, int b)
{
    int answer;
    int counter;

    answer = 0;
    counter = 1;

    while (counter <= 200) {
        int temp;
        temp = 0;
        if (((a % counter) == 0) && ((b % counter) == 0)) {
            temp = counter;
            if (temp > answer) {
                answer = temp;
            }
        }
        counter = counter + 1;
    }

    return answer;
}

int nums[100];

def int sum_nums(int len)
{
    int counter;
    int sum;

    counter = 0;
    sum = 0;

    while (counter < len) {
        sum = sum + nums[counter];
        counter = counter + 1;
    }

    return sum;
}

def void sort_nums(int len)
{
    int counter;
    int curr;
    int j;

    counter = 1;
    curr = 0;
    j = 0;

    // insertion sort
    while (counter < len) {
        curr = nums[counter];

        j = counter - 1;

        while ((j >= 0) && (curr < nums[j])) {
            nums[j + 1] = nums[j];
            j = j - 1;
        }
        nums[j + 1] = curr;

        counter = counter + 1;
    }
}

int lengths[100];

def void draw_triangle(int base)
{
    int counter;       // keep track of how many levels
    int temp_counter;  // copy of counter for left whitespace
    int length;        // stores lengths of a single line

    counter = 0;
    length = base;

    // populate lengths array with length of each level
    while (length > 0) {
        lengths[counter] = length;
        length = length - 2;
        counter = counter + 1;
    }

    // fixes row of whitespace on top of triangle
    counter = counter - 1;

    // iterate over array in reverse 
    while (counter >= 0) {
        temp_counter = counter;

        // use temp array to know how much whitespace on left side
        while (temp_counter > 0) {
            print_str(" ");
            temp_counter = temp_counter - 1;
        }

        // use lengths array to get appropriate number of #s
        while (lengths[counter] > 0) {
            print_str("#");
            lengths[counter] = lengths[counter] - 1;
        }
        print_str("\n");
        counter = counter - 1;
    }

}

def int main()
{
}

